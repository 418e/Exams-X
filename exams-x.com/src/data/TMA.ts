/* 
    Tag Managment Algorithm
*/

/* 
    Endpoints

    tags/
    tags/tag
    tags/strong
    tags/weak
*/

/* 
    Imports
*/

const math = localStorage.getItem("math") || "[]";
const eng = localStorage.getItem("math") || "[]";
const geo = localStorage.getItem("math") || "[]";

/* 
    Functions
*/

// translates tags

export function translate(tag: number) {
  const tags: any = {
    100: "სიმრავლეები",
    101: "ნატურალური რიცხვები",
    102: "მარტივი და შედგენილი რიცხვები",
    103: "მთელი რიცხვები",
    104: "რაციონალური რიცხვები",
    105: "ირაციონალური და ნამდვილი რიცხვები",
    106: "რიცხვითი ღერძი",
    107: "რიცხვითი შუალედები",
    108: "რიცხვის მოდული",
    109: "პოზიციური სისტემები",
    110: "პროპორცია",
    111: "პროცენტი და ნაწილი",
    112: "ხარისხები",
    113: "ერთწევრი და მრავალწევრი",
    114: "შემოკლებული გამრავლების ფორმულები",
    115: "მრავალწევრის დაშლა",
    116: "რაციონალური გამოსახულება",
    117: "N - ური ხარისხის ფესვი, არითმეტიკული ფესვი",
    118: "ალგებრული გამოსახულება",
    119: "ლოგარითმი",
    120: "კოორდინატთა სისტემა სიბრტყეზე",
    121: "კოორდინატთა სისტემა სივრცეში",
    122: "ფუნქცია",
    123: "კუთხის გრადუსული და რადიანული ზომა",
    124: "ტრიგონომეტრიული ფუქნციები",
    125: "განტოლებები",
    126: "ერთუცნობიანი წრფივი განტოლება",
    127: "ერთუცნობიანი კვადრატული განტოლება",
    128: "კვადრატული სამწევრი",
    129: "ორუცნობიანი განტოლებათა სისტემა",
    130: "უტოლობა, უტოლობათა სისტემა",
    131: "ირაციონალური განტოლება",
    132: "მაჩვენებლიანი განტოლება და უტოლობა",
    133: "ლოგარითმული განტოლება და უტოლობა",
    134: "ტრიგონომეტრიული განტოლება",
    135: "რიცხვითი მიმდევრობა",
    136: "არითმეტიკული პროგრესია",
    137: "გეომეტრიული პროგრესია",
    138: "კომბინატორიკის ელემენტები",
    139: "წერტილი და წრფე",
    140: "მონაკვეთისა და ტეხილის სიგრძე",
    141: "კუთხეები",
    142: "კუთხის ბისექტრისა",
    143: "მონაკვეთის შუამართობი",
    144: "მოსაზღვრე და ვერტიკალური კუთხეები",
    145: "წრფეთა პარალელობა",
    146: "წრფეთა მართობულობა",
    147: "მრავალკუთხედები",
    148: "ამოზნექილი მრავალკუთხედი",
    149: "სამკუთხედი",
    150: "სამკუთხედის კუთხეები",
    151: "სამკუთხედის ტოლობა",
    152: "სამკუთხედის უტოლობა",
    153: "სამკუთხედის მედიანა",
    154: "სამკუთხედის ბისექტრისა",
    155: "ტოლფერდა სამკუთხედი",
    156: "მართკუთხა სამკუთხედი",
    157: "მლაგვკუთხა სამკუთხედი",
    158: "მახვილკუთხა სამკუთხედი",
    159: "ტოლგვერდა სამკუთხედი",
    160: "პითაგორას თეორემა",
    161: "თალესის თეორემა",
    162: "სამკუთხედის შუახაზი",
    163: "სამკუთხედის მსგავსება",
    164: "სინუსების თეორემა",
    165: "კოსინუსების თეორმა",
    166: "პარალელოგრამი",
    167: "რომბი",
    168: "მართკუთხედი, კვადრატი",
    169: "ტრაპეცია",
    170: "ტოლფერდა ტრაპეცია",
    171: "ფართობი",
    172: "წრეწირი და წრე",
    173: "ცენტრალური და ჩაზაზული კუთხეები",
    174: "მხები და მკვეთი",
    175: "ჩაზაზული და შემოხაზული წრეწირები",
    176: "წესიერი მრავალკუთხედები",
    177: "წესიერი მრავალკუთხედის ფართობი",
    178: "წრიული სექტორისა და წრის ფართობი",
    179: "წერტილი, წრფე და სიბრტყე სივრცეში",
    180: "წრტფეთა ურთიერთგანალეგება სივრცეში",
    181: "დაგეგმილება",
    182: "წრფისა და სიბრტყის პარალელობა",
    183: "სიბრტყეთა პარალელობა",
    184: "კუთხე სიბრტყეებს შორის",
    185: "სიბრტყეთა მართობულობა",
    186: "მონაკვეთი, მართობი და დახრილი",
    187: "კუთხე წრფესა და სიბრტყეს შორის",
    188: "ორწახნაგა კუთხე",
    189: "მრავალწახნაგა",
    190: "პრიზმა",
    191: "პირზმის კერძო სახეები",
    192: "პირამიდა",
    193: "წესიერი პირამიდა",
    194: "ცილინდრი",
    195: "კონუსი",
    196: "ბირთვი, სფერო",
    197: "ბირთვის მხები და კვეთა სიბრტყით",
    198: "სხეულის მოცულობა და ზედაპირის ფართობი",
    199: "შლილები",
    200: "ვექტორები",
    201: "დიაგრამები",
    202: "რიცხვითი მახასიათებლები",
    203: "ალბათობის თეორია",
  };

  return {
    id: tag,
    tag: tags[tag],
  };
}

// returns tags, tags/strong and tags/weak

function getTags() {
  const strong: string[] = [];
  const weak: string[] = [];
  const points: { tag: string; points: number }[] = [];
  JSON.parse(math).strong.map((tag: any) => {
    strong.push(translate(tag).tag);
  });
  JSON.parse(math).weak.map((tag: any) => {
    weak.push(translate(tag).tag);
  });
  JSON.parse(math).points.map((tag: any) => {
    points.push({
      tag: translate(tag.tag).tag,
      points: tag.points,
    });
  });

  return {
    strong: strong,
    weak: weak,
    points: points,
  };
}

/* 
    Algorithms
*/
